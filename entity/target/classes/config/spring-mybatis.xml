<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd


    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">


       <bean id="propertyConfigurer"
             class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
              <property name="locations">
                     <list>
                            <!-- 这里支持多种寻址方式：classpath和file -->
                            <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
                            <value>classpath:db.properties</value>
                            <value>classpath:messages_zh_CH.properties</value>
                     </list>
              </property>
       </bean>


       <!-- spring与mybatis整合配置，扫描所有dao -->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.wpj.work.dao" />
              <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
       </bean>
       <!-- mybatis文件配置，扫描所有mapper文件 -->
       <bean id="sqlSessionFactory"
             class="org.mybatis.spring.SqlSessionFactoryBean"
             p:mapperLocations="classpath:mapper/*Mapper.xml"
             p:typeAliasesPackage="com.wpj.work.entity"
               >
        <property name="dataSource" ref="dataSource"></property>
           <!--加入分页插件 -->
           <property name="plugins">
               <array>
                   <bean class="com.github.pagehelper.PageHelper">
                       <property name="properties">
                           <value>
                               dialect=mysql
                               reasonable=true
                           </value>
                       </property>
                   </bean>
               </array>
           </property>
       </bean>
       <!-- configLocation为mybatis属性 mapperLocations为所有mapper-->
       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
             destroy-method="close" >
              <property name="driverClassName">
                     <value>${driver}</value>
              </property>
              <property name="url">
                     <value>${url}</value>
              </property>
              <property name="username">
                     <value>${username}</value>
              </property>
              <property name="password">
                     <value>${password}</value>
              </property>
              <!-- 连接池最大使用连接数 -->
              <property name="maxActive">
                     <value>20</value>
              </property>
              <!-- 初始化连接大小 -->
              <property name="initialSize">
                     <value>1</value>
              </property>
              <!-- 获取连接最大等待时间 -->
              <property name="maxWait">
                     <value>60000</value>
              </property>
              <!-- 连接池最小空闲 -->
              <property name="minIdle">
                     <value>3</value>
              </property>
              <!-- 自动清除无用连接 -->
              <property name="removeAbandoned">
                     <value>true</value>
              </property>
              <!-- 清除无用连接的等待时间 -->
              <property name="removeAbandonedTimeout">
                     <value>180</value>
              </property>
              <!-- 连接属性 -->
              <property name="connectionProperties">
                     <value>clientEncoding=UTF-8</value>
              </property>
       </bean>


       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource" />
       </bean>
       <!-- 注解方式配置事物 -->
       <tx:annotation-driven transaction-manager="transactionManager" />
       <!-- 拦截器方式配置事物 -->

       <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <tx:method name="add*" propagation="REQUIRED" />
                     <tx:method name="append*" propagation="REQUIRED" />
                     <tx:method name="insert*" propagation="REQUIRED" />
                     <tx:method name="save*" propagation="REQUIRED" />
                     <tx:method name="update*" propagation="REQUIRED" />
                     <tx:method name="modify*" propagation="REQUIRED" />
                     <tx:method name="edit*" propagation="REQUIRED" />
                     <tx:method name="delete*" propagation="REQUIRED" />
                     <tx:method name="remove*" propagation="REQUIRED" />
                     <tx:method name="repair" propagation="REQUIRED" />
                     <tx:method name="delAndRepair" propagation="REQUIRED" />

                     <tx:method name="get*" propagation="SUPPORTS" />
                     <tx:method name="find*" propagation="SUPPORTS" />
                     <tx:method name="load*" propagation="SUPPORTS" />
                     <tx:method name="search*" propagation="SUPPORTS" />
                     <tx:method name="datagrid*" propagation="SUPPORTS" />

                     <tx:method name="*" propagation="SUPPORTS" />
              </tx:attributes>
       </tx:advice>
       <!--<bean id="contentManager"-->
             <!--class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">-->
              <!--<property name="favorPathExtension" value="true"/>-->
              <!--<property name="ignoreAcceptHeader" value="true" />-->
              <!--<property name="defaultContentType" value="text/html" />-->
              <!--<property name="useJaf" value="false"/>-->
              <!--<property name="mediaTypes">-->
                     <!--<map>-->
                            <!--<entry key="json" value="application/json" />-->
                            <!--<entry key="html" value="text/html" />-->
                            <!--<entry key="xml" value="application/xml" />-->
                     <!--</map>-->
              <!--</property>-->
       <!--</bean>-->
<!--<aop:config>-->
    <!--&lt;!&ndash;配置AOP，spring是通过AOP来事物观-->
    <!--配置pointCut表示那些方法加入事务管理里的-->
    <!--以下事物是生命正在DAO中，但是通常都会在service俩处理多个业务逻辑关系，注入删除，更新等等，此时如果在执行一个-->
    <!--一个步骤之后抛出异常，就会导致数据的不完整，所以事物不应该在DAO而应该在service，这也就是spring所提供的一个非常-->
    <!--方便的工具事物式声明-->
    <!--&ndash;&gt;-->
    <!--<aop:pointcut id="allMenthod" expression="execution(* spring.security.maven.service.*.*(..))"></aop:pointcut>-->
    <!--<aop:advisor advice-ref="transactionAdvice" pointcut-ref="allMenthod"></aop:advisor>-->
<!--</aop:config>-->

</beans>